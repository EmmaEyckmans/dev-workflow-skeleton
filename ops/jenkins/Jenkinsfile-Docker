/********** Global variables **********/
VERSION_NUMBER = "";

/***** Networks *****/
JENKINS_NETWORK = "dws-jenkins"

/***** Images *****/
MVN_IMAGE = "dws/mvn"
MVN_FRONTEND_IMAGE = "dws/mvn-front-end"
DB_CLEAN_IMAGE = "dws/db"
DB_MIGRATED_IMAGE = "dws/db-migrated"

/***** Containers *****/
JENKINS_MAVEN_NAME = "dws_jenkins_mvn"
COMMIT_DB_NAME = "dws_jenkins_db_commit"

/*********** Build workflow ***********/
stage name: "commit"
	node("linux && docker") {
		cleanWorkspace()
		cloneProject()
		determineVersionNumber()
		setMvnVersion()
		buildCleanDbImage()
		buildMigratedDbImage()
		buildWithoutE2ETests()
		stopWhenFailures()
		stashWorkspace()
	}

/********** Helper functions **********/
def cleanWorkspace() {
	sh "rm -rf *"
}

def cloneProject() {
	git credentialsId: "385df167-99f7-408d-b9d8-ad982a7c997b", url: "https://github.com/cegeka/dev-workflow-skeleton.git"
}	

def determineVersionNumber() {
	sh "git rev-list --count HEAD > nb-commits.txt"
	def nbCommits = readFile("nb-commits.txt").trim()
	VERSION_NUMBER = "0.0.${nbCommits}"
}

def setMvnVersion() {
	mvn("versions:set -DnewVersion=${VERSION_NUMBER} -DgenerateBackupPoms=false", MVN_IMAGE, JENKINS_NETWORK)
}

def buildWithoutE2ETests() {
	def dbName = "${COMMIT_DB_NAME}_${VERSION_NUMBER}"
	
	try {
		startContainer(DB_MIGRATED_IMAGE, dbName, JENKINS_NETWORK)
		mvn("clean install -Djenkins -Ddb.host=${dbName}:5432 -pl '!:dws-acc-tests'", MVN_FRONTEND_IMAGE, JENKINS_NETWORK)
	} catch(err) {
		printError(err)
		currentBuild.result  = "FAILURE"
	} finally {
		removeContainer(dbName)
		archiveAllTestResults()
		archiveArtifacts()
	}
}

def archiveAllTestResults() {
	step([$class: "JUnitResultArchiver", testResults: "**/target/surefire-reports/TEST-*.xml"])
	step([$class: "JUnitResultArchiver", testResults: "**/target/failsafe-reports/TEST-*.xml"])
}

def archiveArtifacts() {
 	step([$class: "ArtifactArchiver", artifacts: "**/target/*.jar", fingerprint: true])
 	step([$class: "ArtifactArchiver", artifacts: "**/dws-ui/target/dist/**/*", fingerprint: true])
}

def stopWhenFailures() {
	if (currentBuild.result != null && !currentBuild.result.equalsIgnoreCase("STABLE")) {
	    error "There are failures in the current stage. The current build will be stopped."
	}
}

def stashWorkspace() {
	stash includes: '**/*', name: 'workspace', useDefaultExcludes: false
}

def mvn(task, mvnImageName, network) {
	def mvnName = "${JENKINS_MAVEN_NAME}_${VERSION_NUMBER}"

	try {
		startMvnContainer(mvnImageName, mvnName, network)
		execMvn(mvnName, task)	
	} catch(err) {
		printError(err)
		currentBuild.result  = "FAILURE"
	} finally {
		removeContainer(mvnName)
	}
}

def printError(error) {
	println "******************************* WORKFLOW ERROR *******************************"
	println "${error}"
	println "******************************************************************************"
}

/********** DWS Docker functions **********/
def buildCleanDbImage() {
	sh "docker build -t ${DB_CLEAN_IMAGE}:${VERSION_NUMBER} ops/dws/db/clean/"
}

def buildMigratedDbImage() {
	sh "(echo 'FROM dws/db:${VERSION_NUMBER}' && cat ops/dws/db/migrated/Dockerfile.template) > ops/dws/db/migrated/Dockerfile"
	sh "mkdir -p ops/dws/db/migrated/db/migration"
	sh "cp -r dws/dws-infrastructure/src/main/resources/db/migration/* ops/dws/db/migrated/db/migration/"
	sh "docker build -t ${DB_MIGRATED_IMAGE}:${VERSION_NUMBER} ops/dws/db/migrated/"
}

/********** Basic Docker functions **********/
def startContainer(imageName, containerName, network) {
	killContainer(containerName)
	sh "docker run -d --net ${network} --name ${containerName} ${imageName}:${VERSION_NUMBER}"
}

def startMvnContainer(mvnImageName, mvnContainerName, network) {
	def currentDir = pwd()
	killContainer(mvnContainerName)
	sh "docker run -t -d --name ${mvnContainerName} --net ${network} -v $currentDir/dws:/usr/src/dws -v /var/jenkins_home/.m2:/root/.m2 ${mvnImageName} cat"
}

def execMvn(mvnContainerName, task) {
	sh "docker exec ${mvnContainerName} mvn -B -Dmaven.test.failure.ignore=true ${task}"
}

def killContainer(name) {
	try { sh "docker rm -vf ${name}" } catch(err) {}	
}

def removeContainer(name) {
	try { sh "docker stop ${name}" } catch(err){}
	try { sh "docker rm -v ${name}" } catch(err){}
}