stage concurrency: 1, name: "commit"
	node("linux && jdk8 && mvn3 && docker") {
	    clearWorkspace()
	    cloneProject()
	    determineVersionNumber()
	    setMvnVersion()
		buildWithoutE2ETests()
		stopWhenFailures()
		stashWorkspace()
	}

stage concurrency: 1, name: "test"
	node("linux && jdk8 && mvn3 && docker && xvfb") {
		clearWorkspace()
		unstashWorkspace()
		buildDockerImages()
		e2eTests()
		stopWhenFailures()
	}

/********** Helper functions **********/
def clearWorkspace() {
	sh "rm -rf *"
}

def cloneProject() {
	git credentialsId: "385df167-99f7-408d-b9d8-ad982a7c997b", url: "https://github.com/cegeka/dev-workflow-skeleton.git"
}

def determineVersionNumber() {
	sh "git rev-list --count HEAD > nb-commits.txt"
}

def versionNumber() {
	def nbCommits = readFile("nb-commits.txt").trim()
	return "0.0.${nbCommits}"
}

def setMvnVersion() {
	mvn("versions:set -DnewVersion=${versionNumber()} -DgenerateBackupPoms=false")
}

def buildWithoutE2ETests() {
	def dbName = "dws_db_jenkins_commit"

	try {
		buildDbImage()
		startDb(dbName)
		mvn("clean install -Ddb.host=${dbName}:5432 -pl '!:dws-acc-tests'")
	} catch(err) {
		currentBuild.result  = "FAILURE"
	} finally {
		stopDb(dbName)
		archiveAllTestResults()
		archiveArtifacts()
	}
}

def buildDockerImages() {
	buildDbImage()
	buildBackendImage()
	buildFrontendImage()
}

def buildDbImage() {
	sh "docker build -t dws/db:${versionNumber()} ops/dws/db/"
}

def buildBackendImage() {
	def versionNumber = versionNumber()
	sh "mkdir ops/dws/back-end/dws-jar"
	sh "cp dws/dws-rest/target/dws-rest-${versionNumber}.jar ops/dws/back-end/dws-jar/dws-rest.jar"
	dir("ops/dws/back-end") {
		sh "docker build -t dws/back-end:${versionNumber} ."
	}
}

def buildFrontendImage() {
	def versionNumber = versionNumber()
	sh "mkdir ops/dws/front-end/dws-dist"
	sh "cp -r dws/dws-ui/target/dist/* ops/dws/front-end/dws-dist/"
	dir("ops/dws/front-end") {
		sh "docker build -t dws/front-end:${versionNumber} ."
	}
}

def e2eTests() {
	def dbName = "dws_db_jenkins_test"
	def backendName = "dws_back-end_jenkins_test"
	def frontendName = "dws_front-end_jenkins_test"

	try {
		startDb(dbName)
		initDb(dbName)
		startBackend(backendName, dbName)
		startFrontend(frontendName, backendName)
		runProtractor()
	} catch(err) {
		currentBuild.result  = "FAILURE"
	} finally {
		stopFrontend(frontendName)
		stopBackend(backendName)
		stopDb(dbName)
		archiveUiTestResults()
	}
}

def runProtractor() {
	wrap([$class: "Xvfb", installationName: "xvfb"]) {
		mvn("clean install -Ddb.host=dws_db_jenkins_test:5432 -pl :dws-acc-tests")
	}
}

def startDb(dbName) {
	try { sh "docker rm -f ${dbName}" } catch(e) {}
	sh "docker run -d --net jenkins --name ${dbName} dws/db:${versionNumber()}"
 }

def stopDb(dbName) {
	sh "docker stop ${dbName}"
	sh "docker rm ${dbName}"	
}

def initDb(dbName) {
	retry(3) { mvn("process-resources flyway:clean flyway:migrate -Ddb.host=${dbName}:5432 -pl :dws-infrastructure") }
}

def startBackend(backendName, dbName) {
	try { sh "docker rm -f ${backendName}" } catch(e) {}
	sh "docker run -d --net jenkins --env db.host=${dbName}:5432 --name ${backendName} dws/back-end:${versionNumber()}"
}

def stopBackend(backendName) {
	sh "docker stop ${backendName}"
	sh "docker rm ${backendName}"	
}

def startFrontend(frontendName, backendName) {
	try { sh "docker rm -f ${frontendName}" } catch(e) {}
	sh "docker run -d --net jenkins --env dws_api_proxy=${backendName}:8080 --name ${frontendName} dws/front-end:${versionNumber()}"
}

def stopFrontend(frontendName) {
	sh "docker stop ${frontendName}"
	sh "docker rm ${frontendName}"	
}

def archiveAllTestResults() {
	step([$class: "JUnitResultArchiver", testResults: "**/target/surefire-reports/TEST-*.xml"])
	step([$class: "JUnitResultArchiver", testResults: "**/target/failsafe-reports/TEST-*.xml"])
}

def archiveUiTestResults() {
	step([$class: "JUnitResultArchiver", testResults: "**/dws-acc-tests/target/surefire-reports/TEST-*.xml"])
}

def stopWhenFailures() {
	if (currentBuild.result != null && !currentBuild.result.equalsIgnoreCase("STABLE")) {
	    error "There are failures in the current stage. The current build will be stopped."
	}
}

def stashWorkspace() {
	stash includes: "**/*", name: "workspace"
}

def unstashWorkspace() {
	unstash "workspace"
}

def mvn(task) {
	def javaHome = tool "jdk8"
	def mvnHome = tool "mvn3"

	dir("dws") {
		withEnv(["JAVA_HOME=${javaHome}", "PATH+MAVEN=${mvnHome}/bin"]) {
		    sh "mvn -B -Dmaven.test.failure.ignore=true ${task}"
		}
	}
}