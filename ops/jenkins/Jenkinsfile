stage concurrency: 1, name: "commit"
	node("linux && jdk8 && mvn3 && docker") {
	    clearWorkspace()
	    cloneProject()
	    determineVersionNumber()
	    setMvnVersion()
		buildWithoutUiTests()
		stopWhenFailures()
		stashWorkspace()
	}

stage concurrency: 1, name: "test"
	node("linux && jdk8 && mvn3 && docker") {
		clearWorkspace()
		unstashWorkspace()
	}

/********** Helper functions **********/
def clearWorkspace() {
	sh "rm -rf *"
}

def cloneProject() {
	git credentialsId: "385df167-99f7-408d-b9d8-ad982a7c997b", url: "https://github.com/cegeka/dev-workflow-skeleton.git"
}

def determineVersionNumber() {
	sh "git rev-list --count HEAD > nb-commits.txt"
}

def versionNumber() {
	def nbCommits = readFile('nb-commits.txt').trim()
	return "0.0.${nbCommits}"
}

def setMvnVersion() {
	mvn("versions:set -DnewVersion=${versionNumber()} -DgenerateBackupPoms=false")
}

def buildWithoutUiTests() {
	def dbName = "dws_db_jenkins"
	try {
		startDb(dbName)
		mvn("clean install -pl '!:dws-acc-tests'")
	} catch(err) {
		currentBuild.result  = "FAILURE"
	} finally {
		stopDb(dbName)
		archiveTestResults()
		archiveArtifacts()
	}
}

def startDb(dbName) {
	sh "docker build -t dws_db ops/dws/db/"
	try { sh "docker rm -f ${dbName}" } catch(e) {}
	sh "docker run -d --net jenkins --name ${dbName} dws_db"
}

def stopDb(dbName) {
	sh "docker stop ${dbName}"
	sh "docker rm ${dbName}"	
}

def archiveTestResults() {
	step([$class: 'JUnitResultArchiver', testResults: '**/target/surefire-reports/TEST-*.xml'])
	step([$class: 'JUnitResultArchiver', testResults: '**/target/failsafe-reports/TEST-*.xml'])
}

def archiveArtifacts() {
 	step([$class: 'ArtifactArchiver', artifacts: '**/target/*.jar', fingerprint: true])
 	step([$class: 'ArtifactArchiver', artifacts: '**/dws-ui/target/dist/**/*', fingerprint: true])
}

def stopWhenFailures() {
	if (currentBuild.result != null && !currentBuild.result.equalsIgnoreCase("STABLE")) {
	    error 'There are failures in the current stage. The current build will be stopped.'
	}
}

def stashWorkspace() {
	stash includes: "**/*", name "workspace"
}

def unstashWorkspace() {
	unstash "workspace"
}

def mvn(task) {
	def javaHome = tool "jdk8"
	def mvnHome = tool "mvn3"

	dir("dws") {
		withEnv(["JAVA_HOME=${javaHome}", "PATH+MAVEN=${mvnHome}/bin"]) {
		    sh "mvn -B -Ddws.environment=jenkins -Dmaven.test.failure.ignore=true ${task}"
		}
	}
}